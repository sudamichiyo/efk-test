name: efk-test

services:
  ### Node: Pseudo CYPHONIC Node
  node:
    build:
      context: ./.docker/node
      dockerfile: Dockerfile
    container_name: node
    environment:
      TZ: Asia/Tokyo
    ports:
      - mode: ingress
        target: 4501
        protocol: tcp
      - mode: ingress
        target: 4502
        protocol: udp
      - mode: ingress
        target: 4503
        protocol: udp
    privileged: true
    restart: always
    tty: true
    volumes:
      - type: bind
        source: ./.docker/node/efk-test
        target: /go/node/efk-test
        bind:
          create_host_path: true
    working_dir: /go/node/efk-test

  ### Fluentd: logs forwarder
  fluentd:
    build:
      context: ./.docker/fluentd
      dockerfile: Dockerfile
    container_name: fluentd
    platform: linux/amd64
    privileged: true
    restart: always
    tty: true
    environment:
      - "TZ=Asia/Tokyo"
    ports:
      - mode: ingress
        published: 24224
        target: 24224
        protocol: tcp
      - mode: ingress
        published: 24224
        target: 24224
        protocol: udp
      - mode: ingress
        published: 5140
        target: 5140
        protocol: tcp
    volumes:
      - type: bind
        source: ./.docker/fluentd/config
        target: /fluentd/etc
        bind:
          create_host_path: true
      - type: bind
        source: ./.docker/nginx/log
        target: /var/log/nginx
        bind:
          create_host_path: true

  ### Elasticsearch: logs store
  elasticsearch:
    build:
      context: ./.docker/elasticsearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    privileged: true
    restart: always
    tty: true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false" # Basic auth / SSL disable
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "TZ=Asia/Tokyo"
    ports:
      - mode: ingress
        published: 9200
        target: 9200
        protocol: tcp

  ### Kibana: log query (KQL - Kibana QL)
  kibana:
    build:
      context: ./.docker/kibana
      dockerfile: Dockerfile
    container_name: kibana
    privileged: true
    restart: always
    tty: true
    environment:
      - "TZ=Asia/Tokyo"
      - "i18n.locale=ja-JP"
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
    ports:
      - mode: ingress
        published: 5601
        target: 5601
        protocol: tcp
